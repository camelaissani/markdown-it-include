{"version":3,"file":"markdownItInclude.js","sources":["../index.js"],"sourcesContent":["\nconst path = require('path');\nconst fs = require('fs');\n\nconst INCLUDE_RE = /!{3}\\s*include(.+?)!{3}/i;\nconst BRACES_RE = /\\((.+?)\\)/i;\n\nconst include_plugin = (md, options) => {\n  const defaultOptions = {\n    rootScope: '.',\n    root: '.',\n    getRootDir: (pluginOptions/*, state, startLine, endLine*/) => pluginOptions.root,\n    getRootScope: (pluginOptions/*, state, startLine, endLine*/) => pluginOptions.rootScope,\n    rootScopeProtection: false,\n    includeRe: INCLUDE_RE,\n    throwError: true,\n    bracesAreOptional: false,\n    notFoundMessage: 'File \\'{{FILE}}\\' not found.',\n    outsideRootScopeMessage: 'File \\'{{FILE}}\\' is outside the specified root directory scope \\'{{ROOT}}\\'.',\n    circularMessage: 'Circular reference between \\'{{FILE}}\\' and \\'{{PARENT}}\\'.'\n  };\n\n  if (typeof options === 'string') {\n    options = {\n      ...defaultOptions,\n      root: options,\n      rootScope: options\n    };\n  } else {\n    options = {\n      ...defaultOptions,\n      ...options\n    };\n  }\n\n  const _replaceIncludeByContent = (src, rootdir, rootScope, parentFilePath, filesProcessed) => {\n    filesProcessed = filesProcessed ? filesProcessed.slice() : []; // making a copy\n    let cap, filePath, mdSrc, errorMessage;\n\n    // store parent file path to check circular references\n    if (parentFilePath) {\n      filesProcessed.push(parentFilePath);\n    }\n    while ((cap = options.includeRe.exec(src))) {\n      let includePath = cap[1].trim();\n      const sansBracesMatch = BRACES_RE.exec(includePath);\n\n      if (!sansBracesMatch && !options.bracesAreOptional) {\n        errorMessage = `INCLUDE statement '${src.trim()}' MUST have '()' braces around the include path ('${includePath}')`;\n      } else if (sansBracesMatch) {\n        includePath = sansBracesMatch[1].trim();\n      } else if (!/^\\s/.test(cap[1])) {\n        // path SHOULD have been preceeded by at least ONE whitespace character!\n        /* eslint max-len: \"off\" */\n        errorMessage = `INCLUDE statement '${src.trim()}': when not using braces around the path ('${includePath}'), it MUST be preceeded by at least one whitespace character to separate the include keyword and the include path.`;\n      }\n\n      if (!errorMessage) {\n        filePath = path.resolve(rootdir, includePath);\n        const relativeFilePath = path.relative(rootScope, filePath);\n\n        // check if desired file is a descendant of specified rootDir\n        if (relativeFilePath.startsWith('..') && options.rootScopeProtection) {\n          errorMessage = options.outsideRootScopeMessage.replace('{{FILE}}', filePath).replace('{{ROOT}}', rootdir);\n        } else if (!fs.existsSync(filePath)) { // check if child file exists or if there is a circular reference\n          // child file does not exist\n          errorMessage = options.notFoundMessage.replace('{{FILE}}', filePath);\n        } else if (filesProcessed.indexOf(filePath) !== -1) {\n          // reference would be circular\n          errorMessage = options.circularMessage.replace('{{FILE}}', filePath).replace('{{PARENT}}', parentFilePath);\n        }\n      }\n\n      // check if there were any errors\n      if (errorMessage) {\n        if (options.throwError) {\n          throw new Error(errorMessage);\n        }\n        mdSrc = `\\n\\n# INCLUDE ERROR: ${errorMessage}\\n\\n`;\n      } else {\n        // get content of child file\n        mdSrc = fs.readFileSync(filePath, 'utf8');\n        // check if child file also has includes\n        mdSrc = _replaceIncludeByContent(mdSrc, path.dirname(filePath), rootScope, filePath, filesProcessed);\n        // remove one trailing newline, if it exists: that way, the included content does NOT\n        // automatically terminate the paragraph it is in due to the writer of the included\n        // part having terminated the content with a newline.\n        // However, when that snippet writer terminated with TWO (or more) newlines, these, minus one,\n        // will be merged with the newline after the #include statement, resulting in a 2-NL paragraph\n        // termination.\n        const len = mdSrc.length;\n        if (mdSrc[len - 1] === '\\n') {\n          mdSrc = mdSrc.substring(0, len - 1);\n        }\n      }\n\n      // replace include by file content\n      src = src.slice(0, cap.index) + mdSrc + src.slice(cap.index + cap[0].length, src.length);\n    }\n    return src;\n  };\n\n  const _includeFileParts = (state, startLine, endLine/*, silent*/) => {\n    state.src = _replaceIncludeByContent(state.src, options.getRootDir(options, state, startLine, endLine), options.getRootScope(options, state, startLine, endLine));\n  };\n\n  md.core.ruler.before('normalize', 'include', _includeFileParts);\n};\n\nmodule.exports = include_plugin;\n"],"names":["path","require","fs","INCLUDE_RE","BRACES_RE","include_plugin","md","options","defaultOptions","rootScope","root","getRootDir","pluginOptions","getRootScope","rootScopeProtection","includeRe","throwError","bracesAreOptional","notFoundMessage","outsideRootScopeMessage","circularMessage","_replaceIncludeByContent","src","rootdir","parentFilePath","filesProcessed","slice","cap","filePath","mdSrc","errorMessage","push","exec","includePath","trim","sansBracesMatch","test","resolve","relativeFilePath","relative","startsWith","replace","existsSync","indexOf","Error","readFileSync","dirname","len","length","substring","index","_includeFileParts","state","startLine","endLine","core","ruler","before","module","exports"],"mappings":"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"}