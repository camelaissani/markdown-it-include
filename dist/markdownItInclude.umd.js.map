{"version":3,"file":"markdownItInclude.umd.js","sources":["../index.js"],"sourcesContent":["\nconst path = require('path');\nconst fs = require('fs');\n\nconst INCLUDE_RE = /!{3}\\s*include(.+?)!{3}/i;\nconst BRACES_RE = /\\((.+?)\\)/i;\n\nconst include_plugin = (md, options) => {\n  const defaultOptions = {\n    root: '.',\n    getRootDir: (pluginOptions/*, state, startLine, endLine*/) => pluginOptions.root,\n    includeRe: INCLUDE_RE,\n    throwError: true,\n    bracesAreOptional: false,\n    notFoundMessage: 'File \\'{{FILE}}\\' not found.',\n    circularMessage: 'Circular reference between \\'{{FILE}}\\' and \\'{{PARENT}}\\'.'\n  };\n\n  if (typeof options === 'string') {\n    options = {\n      ...defaultOptions,\n      root: options\n    };\n  } else {\n    options = {\n      ...defaultOptions,\n      ...options\n    };\n  }\n\n  const _replaceIncludeByContent = (src, rootdir, parentFilePath, filesProcessed) => {\n    filesProcessed = filesProcessed ? filesProcessed.slice() : []; // making a copy\n    let cap, filePath, mdSrc, errorMessage;\n\n    // store parent file path to check circular references\n    if (parentFilePath) {\n      filesProcessed.push(parentFilePath);\n    }\n    while ((cap = options.includeRe.exec(src))) {\n      let includePath = cap[1].trim();\n      const sansBracesMatch = BRACES_RE.exec(includePath);\n\n      if (!sansBracesMatch && !options.bracesAreOptional) {\n        errorMessage = `INCLUDE statement '${src.trim()}' MUST have '()' braces around the include path ('${includePath}')`;\n      } else if (sansBracesMatch) {\n        includePath = sansBracesMatch[1].trim();\n      } else if (!/^\\s/.test(cap[1])) {\n        // path SHOULD have been preceeded by at least ONE whitespace character!\n        /* eslint max-len: \"off\" */\n        errorMessage = `INCLUDE statement '${src.trim()}': when not using braces around the path ('${includePath}'), it MUST be preceeded by at least one whitespace character to separate the include keyword and the include path.`;\n      }\n\n      if (!errorMessage) {\n        filePath = path.resolve(includePath.indexOf('/') === 0\n          ? rootdir\n          : parentFilePath\n            ? path.dirname(parentFilePath)\n            : rootdir\n        , `./${includePath}`);\n\n        // check if child file exists or if there is a circular reference\n        if (!fs.existsSync(filePath)) {\n          // child file does not exist\n          errorMessage = options.notFoundMessage.replace('{{FILE}}', filePath);\n        } else if (filesProcessed.indexOf(filePath) !== -1) {\n          // reference would be circular\n          errorMessage = options.circularMessage.replace('{{FILE}}', filePath).replace('{{PARENT}}', parentFilePath);\n        }\n      }\n\n      // check if there were any errors\n      if (errorMessage) {\n        if (options.throwError) {\n          throw new Error(errorMessage);\n        }\n        mdSrc = `\\n\\n# INCLUDE ERROR: ${errorMessage}\\n\\n`;\n      } else {\n        // get content of child file\n        mdSrc = fs.readFileSync(filePath, 'utf8');\n        // check if child file also has includes\n        mdSrc = _replaceIncludeByContent(mdSrc, rootdir, filePath, filesProcessed);\n        // remove one trailing newline, if it exists: that way, the included content does NOT\n        // automatically terminate the paragraph it is in due to the writer of the included\n        // part having terminated the content with a newline.\n        // However, when that snippet writer terminated with TWO (or more) newlines, these, minus one,\n        // will be merged with the newline after the #include statement, resulting in a 2-NL paragraph\n        // termination.\n        const len = mdSrc.length;\n        if (mdSrc[len - 1] === '\\n') {\n          mdSrc = mdSrc.substring(0, len - 1);\n        }\n      }\n\n      // replace include by file content\n      src = src.slice(0, cap.index) + mdSrc + src.slice(cap.index + cap[0].length, src.length);\n    }\n    return src;\n  };\n\n  const _includeFileParts = (state, startLine, endLine/*, silent*/) => {\n    state.src = _replaceIncludeByContent(state.src, options.getRootDir(options, state, startLine, endLine));\n  };\n\n  md.core.ruler.before('normalize', 'include', _includeFileParts);\n};\n\nmodule.exports = include_plugin;\n"],"names":["path","require","fs","INCLUDE_RE","BRACES_RE","include_plugin","md","options","defaultOptions","root","getRootDir","pluginOptions","includeRe","throwError","bracesAreOptional","notFoundMessage","circularMessage","_replaceIncludeByContent","src","rootdir","parentFilePath","filesProcessed","slice","cap","filePath","mdSrc","errorMessage","push","exec","includePath","trim","sansBracesMatch","test","resolve","indexOf","dirname","existsSync","replace","Error","readFileSync","len","length","substring","index","_includeFileParts","state","startLine","endLine","core","ruler","before","module","exports"],"mappings":"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"}